This is cl-config.info, produced by makeinfo version 4.13 from cl-config.texinfo.

START-INFO-DIR-ENTRY
* cl-config: (cl-config.info). A configuration library for Common Lisp.
END-INFO-DIR-ENTRY

   This manual is for cl-config version 0.1.

   Copyright (C) 2011 Mariano Montone

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and
     modify this GNU manual.  Buying copies from the FSF supports it in
     developing GNU and promoting software freedom."

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding a
     copy of the license to the document, as described in section 6 of
     the license.


File: cl-config.info,  Node: Top,  Next: Introduction,  Up: (dir)

cl-config - A configuration library for Common Lisp
***************************************************

This is cl-config Common Lisp library documentation

* Menu:

* Introduction::                        What is cl-config?
* Overview::                            A cl-config overview
* Configuration schemas::               What configuration schemas are and how to define them
* Configurations::                      What configurations are and how to define them
* Installer::                           How to create an application installer
* Examples::                            Some examples
* Frontend::                            Tools for configuration editing
* Custom option types::                 How to define custom option types
* System reference::                    The system reference
* References::                          Related work
* Index::                               Complete index.

 --- The Detailed Node Listing ---

Introduction

* Summary::                     A brief summary of what Gestalt is
* Installation::                How to install Gestalt
* Feedback::                    Bug reports, ideas, patches etc.
* Conventions::                 Type-setting conventions in the manual

Overview

Configuration schemas

Configurations

* Working with configurations::         The API to work with configurations
* Configurations serialization::        Configurations serialization

Installer

* Installers overview::           An overview of installers
* Defining installers::           How to define installers
* Working with installers::       How to work with an installer
* Installer language::            Explanation of the installer's language
* Installer examples::            Some installers examples
* Installer frontends::           The installer frontends

Examples

* Use cases::                           Typical use cases

Frontend

Custom option types

System References

References

Index


File: cl-config.info,  Node: Introduction,  Next: Overview,  Prev: Top,  Up: Top

1 Introduction
**************

cl-config is a configuration library for Common Lisp

   You can get a copy and this manual at
`http://common-lisp.net/project/cl-config'

* Menu:

* Summary::                     A brief summary of what cl-config is
* Installation::                How to install cl-config
* Feedback::                    Bug reports, ideas, patches etc.
* Conventions::                 Type-setting conventions in the manual


File: cl-config.info,  Node: Summary,  Next: Installation,  Up: Introduction

1.1 Summary
===========

cl-config is a configuration library for Common Lisp


File: cl-config.info,  Node: Installation,  Next: Feedback,  Prev: Summary,  Up: Introduction

1.2 Installation
================

To install cl-config, start a Common Lisp session and type the
following:

     CL-USER> (require :asdf-install)
     CL-USER> (asdf-install:asdf-install 'cl-config)


File: cl-config.info,  Node: Feedback,  Next: Conventions,  Prev: Installation,  Up: Introduction

1.3 Feedback
============

Mail marianomontone at gmail dot com with feedback


File: cl-config.info,  Node: Conventions,  Prev: Feedback,  Up: Introduction

1.4 Conventions
===============

Hear are some coding conventions we'd like to follow:

   * We _do_ believe in documentation. Document your dynamic variables,
     functions, macros and classes. Besides, provide a documentation
     from a wider perspective. Provide diagrams and arquitecture
     documentation; examples and tutorials, too. Consider using an
     automatic documentation generator (see the bitacora package in the
     dependencies).

   * We don't want functions to be shorter than the should nor longer
     than they should. There is no "every function should have at most
     ten lines of code" rule. We think that coding is like literature
     to a great extent. So you should strive for beauty and clarity.
     Again, that your code is object oriented doesn't imply that your
     methods will ideally have two lines of code and dispatch to
     somewhere else; that is not always good at all. It may be good
     from an object oriented point of view, but it is too low level. We
     want to think in terms of languages, that is higher level,
     instead of objects sending messages.

   * Use destructuring-bind or let or a pattern-matching library
     instead of car, cdr, cadr, and the like to obtain more readable
     code.

   * Use widely known Common Lisp coding guidelines:
     `http://web.archive.org/web/20050305123711/www.lisp.org/table/style.htm'



File: cl-config.info,  Node: Overview,  Next: Configuration schemas,  Prev: Introduction,  Up: Top

2 Overview
**********

CL-CONFIG is a configuration library for Common Lisp.

   The idea is to define configuration-schemas and get a proper way of:

   * Sharing and versioning your project's configuration schemas, but
     not your configurations. That way, you avoid overwriting
     configurations from different coders. Each coder has his own
     configurations that need to match the configuration schemas in the
     project. Whenever a project's configuration schema changes, each
     coder is reponsible of updating his configurations to match the
     new schemas.

   * Being able to define configuration schemas declaratively.

   * Provide configurations documentation and validation.

   * Edit configurations from a GUI.

   * Define your own option configurations types and provide validation
     for them.


File: cl-config.info,  Node: Configuration schemas,  Next: Configurations,  Prev: Overview,  Up: Top

3 Configuration schemas
***********************

* Menu:

* Built-in option types::       The built-in option types

   Configuration schemas define the structure of a configuration.

   The syntax to define configuration schemas is the following:

     (define-configuration-schema _configuration-schema-name_
             ({_parent-configuration-schema_}*)
             (:title _configuration-schema-title_)
             [(:documentation _configuration-schema-documentation_)]
             {_configuration-schema-section_}*)

   Where:

   * _configuration-schema-name_ is the name of the
     configuration-schema and the configuration-schema is globally
     identified by it. See _find-configuration-schema_

   * _parent-configuration-schema_ is the configuration schema we
     inherit from. Inheriting from a configuration schema means adding
     its sections to the child schema. Configuration schemas can
     inherit from several parents

   * _configuration-schema-title_ is a string describing very shortly
     the configuration schema. It is used to display configuration
     schemas from the editing GUI. It is a required argument.

   * _configuration-schema-documentation_ is the configuration schema
     documentation. This is not a required argument. It is also used
     from the editing GUI and is very useful for the configuration
     schema user.

   Each configuration schema section follows this syntax:

        (:section _section-identifier_ _section-title_
           [(:documentation _section-documentation_)]
           {_option-schema_}*)

   Where:
   * _section-identifier_ is a keyword that uniquely identifies the
     section

   * _section-title_ is a string describing very shortly the section.
     It is used to display sections from the editing GUI.

   And option schemas are specified like this:

     (_option-identifier_ _option-title_ _option-type_ {_option-parameter_*})

   where:

   * _option-identifier_ is a keyword that uniquely identifies the
     option

   * _option-title_ is a string describing very shortly the option. It
     is used to display sections from the editing GUI.

   * _option-type_ is the option type. There are different ways of
     specifying an option type, depending on the type.

   * _option-parameters_ may be:

        - _:documentation_ followed by the documentation string. To
          document the option.

        - _default_ followed by the default option value. If the
          configuration leaves the option unspecified, then it has the
          default value.

        - _optional_, followed by true (t) of false (nil). Determines
          if the option value can be left unspecified. Default is false.

        - _avanced_, followed by true (t) or false (nil). Determines if
          the option category is "advanced" (default is false)

   Here is a simple example:

     (define-configuration-schema database-configuration ()
        (:title "Database configuration")
        (:documentation "Database configuration")
        (:section :database-configuration "Database configuration"
           (:documentation "Section for configuring the database")
           (:connection-type "Connection type"
               (:one-of (:socket "Socket"
     			    :configuration 'db-socket-configuration)
     		   (:tcp "TCP"
     			 :configuration 'db-tcp-configuration)))
           (:username "Username" :text :documentation "The database engine username")
           (:password "Password" :text :documentation "The database engine password")
           (:database-name "Database name" :text)
           (:database-parameters "Database parameters" :text :default "" :advanced t)))

   That is a typical configuration schema needed to connect to a
database.

   It has only one section _database-configuration_ where the user is
supposed to specify the connection type, the database name, the
username, password, and extra parameters needed to connect to a
database. In this case, most of the options are of type _:text_.


File: cl-config.info,  Node: Built-in option types,  Up: Configuration schemas

3.1 Built-in option types
=========================

* Menu:

* Text::                           The text option type
* Integer::                        The integer option type
* Boolean::                        The boolean option type
* Email::                          The email option type
* Url::                            The URL option type
* Pathname::                       The pathname option type
* One of::                         The ``one of'' option type
* List::                           The list option type


File: cl-config.info,  Node: Text,  Next: Integer,  Up: Built-in option types

3.1.1 Text
----------

The text option type is specified with _:text_. It ensures that the the
option value is of type string.

   Example:

     (:username "Username" :text :documentation "The database engine username")
     (:password "Password" :text :documentation "The database engine password")


File: cl-config.info,  Node: Integer,  Next: Boolean,  Prev: Text,  Up: Built-in option types

3.1.2 Integer
-------------

The integer option type is specified with _:integer_. It ensures that
the the option value is of type integer.

   Example:

     (:port "Port" :integer :documentation "Web application port")


File: cl-config.info,  Node: Boolean,  Next: Email,  Prev: Integer,  Up: Built-in option types

3.1.3 Boolean
-------------

The boolean option type is specified with _:boolean_. It ensures that
the the option value is of type boolean (t or nil).

   Example:

     (:catch-errors-p "Catch errors?" :boolean :documentation "Whether to handle application errors")


File: cl-config.info,  Node: Email,  Next: Url,  Prev: Boolean,  Up: Built-in option types

3.1.4 Email
-----------

The email option type is specified with _:email_. It ensures that the
the option value is a valid email string.

   Example:

     (:port "Email" :email :documentation "User email")


File: cl-config.info,  Node: Url,  Next: Pathname,  Prev: Email,  Up: Built-in option types

3.1.5 Url
---------

The url option type is specified with _:url_. It ensures that the the
option value is a valid url. The option value is converted to a url
(cl-url) if it is a string, or left unmodified if already a url.

   Example:

     (:host "Host" :url :documentation "The web application host")


File: cl-config.info,  Node: Pathname,  Next: One of,  Prev: Url,  Up: Built-in option types

3.1.6 Pathname
--------------

The pathaname option type is specified with _:path_. It ensures that
the the option value is a valid pathname and the file or directory
exists. The option value is converted to a pathname if it is a string,
or left unmodified if already a pathname.

   Example:

     (:stylesheet "Stylesheet" :pathname :documentation "The stylesheet file")


File: cl-config.info,  Node: One of,  Next: List,  Prev: Pathname,  Up: Built-in option types

3.1.7 One of
------------

The _one of_ option type is specified with _:one-of_ followed by the
list of options, all between parenthesis. It is ensured that the option
value is one of the options listed. Options are specified as a list
with the option-identifier as a keyword, and the option title with a
string.

   Example:

     (:connection-type "Connection type"
           (:one-of (:socket "Socket")
     	       (:tcp "TCP")))


File: cl-config.info,  Node: List,  Prev: One of,  Up: Built-in option types

3.1.8 List
----------

The _list_ option type is specified with _:list_ followed by the list
of options, all between parenthesis. It is ensured that the option
value is a subset of the options listed. Options are specified as a
list with the option-identifier as a keyword, and the option title with
a string.

   Example:

     (:debugging-levels "Debugging levels" (:list (:info "Info")
     					     (:warning "Warning")
     					     (:profile "Profile")))


File: cl-config.info,  Node: Configurations,  Next: Installer,  Prev: Configuration schemas,  Up: Top

4 Configurations
****************

How to define configurations

* Menu:

* Working with configurations::         The API to work with configurations
* Configurations serialization::        Configurations serialization


File: cl-config.info,  Node: Working with configurations,  Next: Configurations serialization,  Up: Configurations

4.1 Working with configurations
===============================

The API for working with configurations


File: cl-config.info,  Node: Configurations serialization,  Prev: Working with configurations,  Up: Configurations

4.2 Configurations serialization
================================

There are two output backends: an sexp-backend and a xml-backend


File: cl-config.info,  Node: Installer,  Next: Examples,  Prev: Configurations,  Up: Top

5 Installer
***********

* Menu:

* Installers overview::           An overview of installers
* Defining installers::           How to define installers
* Working with installers::       How to work with an installer
* Installer language::            Explanation of the installer's language
* Installer examples::            Some installers examples
* Installer frontends::           The installer frontends


File: cl-config.info,  Node: Installers overview,  Next: Defining installers,  Up: Installer

5.1 Installers overview
=======================

CL-Config provides machinery for building your application installers.

   In CL-Config an application installer is an instance of the class
_installer_. Installers are funcallable, and the idea is to think of
installers as a function returning other function, that is, they follow
a Continuation Passing Style design.

   Some installers features:

   * They are funcallable

   * They are indenpendent of the UI. You can think of an installer as
     some kind of Controller in MVC. There's a web frontend available
     for installers; we plan to build some lighter-weight frontends,
     such as installing from the REPL or from an ncurses interface.

   * They follow a continuation passing design.


File: cl-config.info,  Node: Defining installers,  Next: Working with installers,  Prev: Installers overview,  Up: Installer

5.2 Defining installers
=======================

There's a Domain Specific Language for defining installers and in
particular, wizard installers. Wizard installers are those that asks
for data in different sections or "pages" to complete the installation.

   To define installers, there are three macros: _define-installer_.
_define-wizard-installer_ and _define-standard-installer_.


File: cl-config.info,  Node: Working with installers,  Next: Installer language,  Prev: Defining installers,  Up: Installer

5.3 Working with installers
===========================

An example of an installer session:

     CFG> *i*
     #<WIZARD-INSTALLER MY-INSTALLER "My installer" {1006C2AB99}>

   We use funcall to start interacting with the installer:

     CFG> (funcall *i*)
     (:SECTION :WEBAPP-CONFIGURATION "Web configuration")

   The web configuration section starts

     CFG> (funcall *i*)
     (:INPUT (HTTP-SERVER HOST PORT))

   We are asked to input the :http-server, the :host and the :port

     CFG> (funcall *i* :http-server :apache :host "localhost" :port 8080)
     (:SECTION :DATABASE-CONFIGURATION "Database configuration")

   Success. Now we enter the database configuration section.

     CFG> (funcall *i*)
     (:INPUT (NAME HOST USERNAME PASSWORD CONNECTION-TYPE))

   We are asked to enter database parameters:

     CFG> (funcall *i* :name "my-database" :host "localhost" :username "mariano" :password "pass" :connection-type :foo)
     (:ERRORS
      (#<VALIDATION-ERROR
         FOO value should be one of (SOCKET TCP) on #<ONE-OF-CONFIGURATION-OPTION
                                                      #<CONFIGURATION-SCHEMA-OPTION
                                                        CONNECTION-TYPE "Connection type"
                                                        {1005BDF081}> FOO
                                                      {10085A57F1}>
         {10085A6701}>))

   We entered the parameters, but the :connection-type is not valid. We
have to try again.

     CFG> (funcall *i*)
     (:INPUT (NAME HOST USERNAME PASSWORD CONNECTION-TYPE))
     CFG> (funcall *i* :name "my-database" :host "localhost" :username "mariano" :password "pass" :connection-type :socket)
     (:SECTION :LOGGING-CONFIGURATION "Logging configuration")

   We succeed this time, and we enter the logging configuration section

     CFG> (funcall *i*)
     (:INPUT (BACKEND DEBUGGING-LEVELS OUTPUT-LOCATION ACTIVE-LAYERS))

   We are asked for logging section parameters

     CFG> (funcall *i* :backend :log5 :debugging-levels '(:info) :output-location :file :active-layers '(:debugging))
     #<CONFIGURATION MY-CONFIG "My config" {1006D3DB91}>

   We finish the installation and we get the configured configuration
as result.


File: cl-config.info,  Node: Installer language,  Next: Installer examples,  Prev: Working with installers,  Up: Installer

5.4 Installer language
======================

There's a Domain Specific Language for defining installers. The special
installer language forms are the following:

   * _with-input_ with-input is used to ask for client input.

     Syntax:

          (with-input _bindings_ &body _body_)

     Installer result:
          (:input _bindings_)

     Example:

             (with-input (username password1 password2)
                 (if (equalp password1 password2)
                    ...

     and the installer result:

          (:input (username password1 password2))

     and to provide the data:

          (funcall *i* :username "foo" :password1 "bar" :password2 "bar")

     In general, input data can be obtained, for example, from a web
     form.

   * _start-section_ start-section is used to indicate the beginning of
     a installing section.

     Syntax:

          (start-section &optional _name_ _title_)

     Installer result:
          (:section &optional _name_ _title_)

     Example:

          (start-section :database-configuration "Database configuration")

     and the installer result:

          (:section :database-configuration "Database configuration")

     In general, a section change involves a "page switch" in the
     installer's frontend.

   * _choose_ choose is used to ask the client to choose among a list
     of options.

     Syntax:

          (choose _message_ &rest _options_)

     Installer result:
          (:choose _message_ _options_)

     Example:

          (choose "Connection type" :socket :url)

     and the installer result:

          (:choose "Connection type" (:socket :url))

     and to provide the data:

          (funcall *i* :socket)

   * _question_ question is used to ask the client to choose among a
     list of options.

     Syntax:

          (question _message_)

     Installer result:
          (:question _message_)

     Example:

          (question "Handle errors?")

     and the installer result:

          (:question "Handle errors?")

     and to provide the decision (t or nil):

          (funcall *i* t)

   * _alert_ alert is used to inform the user about something

     Syntax:

          (alert _message_)

     Installer result:
          (:alert _message_)

     Example:

          (alert "This is an alert")

     and the installer result:

          (:alert "This is an alert")

   * _prompt_ prompt is used to ask the client to enter some text
     (string).

     Syntax:

          (prompt _message_)

     Installer result:
          (:prompt _message_)

     Example:

          (prompt "Username")

     and the installer result:

          (:prompt "Username")

     and to provide the data:

          (funcall *i* "Mariano")

   * _install-warning_ and _install-error_ are used to signal warnings
     and errors in the installation.

     Syntax:

          (install-warning _message_)
          (install-error _message_)

     Installer result:
          (:install-warning _message_ &rest _args_)
          (:install-error _message_ &rest _args_)

     Example:

          (install-error "Cannot write to file ~A" #p"/home/foo/bar")

     and the installer result:

          (:install-error "Cannot write to file /home/foo/bar")



File: cl-config.info,  Node: Installer examples,  Next: Installer frontends,  Prev: Installer language,  Up: Installer

5.5 Installer examples
======================

An example of an installer session:

     CFG> *i*
     #<WIZARD-INSTALLER MY-INSTALLER "My installer" {1006C2AB99}>

   We use funcall to start interacting with the installer:

     CFG> (funcall *i*)
     (:SECTION :WEBAPP-CONFIGURATION "Web configuration")

   The web configuration section starts

     CFG> (funcall *i*)
     (:INPUT (HTTP-SERVER HOST PORT))

   We are asked to input the :http-server, the :host and the :port

     CFG> (funcall *i* :http-server :apache :host "localhost" :port 8080)
     (:SECTION :DATABASE-CONFIGURATION "Database configuration")

   Success. Now we enter the database configuration section.

     CFG> (funcall *i*)
     (:INPUT (NAME HOST USERNAME PASSWORD CONNECTION-TYPE))

   We are asked to enter database parameters:

     CFG> (funcall *i* :name "my-database" :host "localhost" :username "mariano" :password "pass" :connection-type :foo)
     (:ERRORS
      (#<VALIDATION-ERROR
         FOO value should be one of (SOCKET TCP) on #<ONE-OF-CONFIGURATION-OPTION
                                                      #<CONFIGURATION-SCHEMA-OPTION
                                                        CONNECTION-TYPE "Connection type"
                                                        {1005BDF081}> FOO
                                                      {10085A57F1}>
         {10085A6701}>))

   We entered the parameters, but the :connection-type is not valid. We
have to try again.

     CFG> (funcall *i*)
     (:INPUT (NAME HOST USERNAME PASSWORD CONNECTION-TYPE))
     CFG> (funcall *i* :name "my-database" :host "localhost" :username "mariano" :password "pass" :connection-type :socket)
     (:SECTION :LOGGING-CONFIGURATION "Logging configuration")

   We succeed this time, and we enter the logging configuration section

     CFG> (funcall *i*)
     (:INPUT (BACKEND DEBUGGING-LEVELS OUTPUT-LOCATION ACTIVE-LAYERS))

   We are asked for logging section parameters

     CFG> (funcall *i* :backend :log5 :debugging-levels '(:info) :output-location :file :active-layers '(:debugging))
     #<CONFIGURATION MY-CONFIG "My config" {1006D3DB91}>

   We finish the installation and we get the configured configuration
as result.


File: cl-config.info,  Node: Installer frontends,  Prev: Installer examples,  Up: Installer

5.6 Installer frontends
=======================

* Menu:

* Web installer frontend::              The web installer frontend
* REPL installer frontend::             The simple REPL installer frontend
* Ncurses installer frontend::          The Ncurses installer frontend


File: cl-config.info,  Node: Web installer frontend,  Next: REPL installer frontend,  Up: Installer frontends

5.6.1 Web installer frontend
----------------------------


File: cl-config.info,  Node: REPL installer frontend,  Next: Ncurses installer frontend,  Prev: Web installer frontend,  Up: Installer frontends

5.6.2 REPL installer frontend
-----------------------------


File: cl-config.info,  Node: Ncurses installer frontend,  Prev: REPL installer frontend,  Up: Installer frontends

5.6.3 Ncurses installer frontend
--------------------------------


File: cl-config.info,  Node: Examples,  Next: Frontend,  Prev: Installer,  Up: Top

6 Examples
**********

* Menu:

* Use cases::                           Typical use cases


     (define-configuration-schema database-configuration ()
        (:title "Database configuration")
        (:documentation "Database configuration")
        (:section :database-configuration "Database configuration"
           (:documentation "Section for configuring the database")
           (:connection-type "Connection type"
               (:one-of (:socket "Socket"
     			    :configuration 'db-socket-configuration)
     		   (:tcp "TCP"
     			 :configuration 'db-tcp-configuration)))
           (:username "Username" :text :documentation "The database engine username")
           (:password "Password" :text :documentation "The database engine password")
           (:database-name "Database name" :text)
           (:database-parameters "Database parameters" :text :default "" :advanced t)))

     (define-configuration-schema cl-config-application-configuration ()
       (:title "CL-CONFIG Application Configuration")
       (:documentation "CL-CONFIG Application Configuration")
       (:section :configuration-settings "Configuration settings"
     	    (:load-configs-from-file "Load configurations from file"
     				     :boolean :default t)
     	    (:load-configs-file "Configurations file" :pathname :optional t)
     	    (:select-config-from-file "Select configuration from file"
     				      :boolean :default t)
     	    (:select-config-file "Select configuration file" :pathname :optional t)))

     (define-configuration-schema db-socket-configuration ()
         (:title "Socket configuration")
         (:section :db-socket-configuration "Socket configuration"
             (:path "Socket" :pathname
                    :default "/tmp/socket.soc")))

     (define-configuration-schema db-tcp-configuration ()
         (:title "TCP configuration")
         (:section "TCP configuration"
             (:url "URL" :url
                   :default "localhost")))

     (define-configuration-schema logging-configuration ()
         (:title "Logging configuration")
         (:documentation "Logging configuration")
         (:section :logging-configuration "Logging configuration"
             (:documentation "Logging configuration")
             (:backend "Backend"
                 (:one-of (:log5 "Log5")))
     	(:debugging-levels "Debugging levels" (:list (:info "Info")
     						     (:warning "Warning")
     						     (:profile "Profile")))
     	(:output-location "Output location"
                         (:one-of (:standard-output "Standard output"
     					       :default *standard-output*)
     			     (:file "File" :default "/tmp/log.log"))
     		    :default '*standard-output)
             (:active-layers "Active layers"
     			(:list
     			 (:debugging "Debugging"
     				     :configuration 'debugging-layer)
     			 (:database "Database"
     				    :configuration database-layer)
     			 (:control-flow "Control flow")
     			 (:system "System")))))

     (define-configuration-schema webapp-configuration (logging-configuration)
         (:title "Web application configuration")
         (:documentation "Web application configuration")
         (:section :webapp-configuration "Web application configuration"
             (:documentation "Web application configuration")
             (:http-server "HTTP server"
                 (:one-of (:apache "Apache"
     			      :configuration 'apache-configuration)
                         (:hunchentoot "Hunchentoot"
     				  :configuration 'hunchentoot-configuration)))
             (:host "Host" :text :default "localhost")
     	(:port "Port" :integer :default 8080)
     	(:catch-errors "Catch errors" :boolean :default t)))

     (define-configuration-schema standard-configuration
         (cl-config-application-configuration
          webapp-configuration
          database-configuration)
           (:title "Standard configuration")
           (:documentation "Standard configuration for a Gestalt application")
           (:page-title "Page title" :text :default "Gestalt application"))

     (define-configuration standard-configuration ()
       (:title "Standard configuration")
       (:configuration-schema standard-configuration)
       (:section :database-configuration
     	    (:connection-type :socket
     			      :value2
     			      '(:db-socket-configuration
     				(:path "/tmp/my-socket.soc")))
     	    (:username "root")
     	    (:password "root")
     	    (:database-name "standard-database"))
       (:section :webapp-configuration
     	    (:http-server :hunchentoot))
       (:section :logging-configuration
     	    (:active-layers (:debugging))
     	    (:output-location :standard-output)
     	    (:debugging-levels (:info))
     	    (:backend :log5)))

     (define-configuration debug-configuration (standard-configuration)
         (:configuration-schema standard-configuration)
         (:title "Debug configuration")
         (:section :database-configuration
             (:database-name "debug-database"))
         (:section :logging-configuration
            (:output-location :standard-output)
            (:active-layers (:debugging :database))
            (:debugging-levels (:info :warning :error)))
         (:section :webapp-configuration
     	      (:catch-errors nil))
         (:documentation "Debugging configuration scheme"))

     (define-configuration test-configuration (standard-configuration)
         (:configuration-schema standard-configuration)
         (:title "Test configuration")
         (:section :database-configuration
             (:database-name "test-database"))
         (:section :logging-configuration
            (:output-location :file :value2 "/tmp/test.log")
            (:active-layers (:debugging :database) :inherit t)
            (:debugging-levels (:warning :error)))
         (:documentation "Testing configuration scheme"))

   An installer example:

     (defmacro configure-section (section configuration options)
       (let ((fname (gensym "CONFIGURE-SECTION-")))
       `(labels ((,fname ()
     	    (with-input ,(mapcar (lambda (option)
     			  (intern (symbol-name option)))
     			options)
     	      (collecting-validation-errors (errors found-p)
     		  (progn
     		    ,@(loop for option in options
     			 collect
     			   `(setf (get-option-value (list ,section ,option)
     						    ,configuration)
     				  ,(intern (symbol-name option)))))
     		(when found-p
     		  (install-errors errors)
     		  (,fname))))))
          (,fname))))

     (define-wizard-installer my-installer
         (:title "My installer"
     	    :documentation "This is my installer")
       (let ((configuration (cfg:with-schema-validation (nil)
     			 (make-configuration my-config ()
     					     (:title "My config")
     					     (:configuration-schema standard-configuration)))))

         ;; Configure web section
         (start-section :webapp-configuration "Web configuration")
         (configure-section :webapp-configuration configuration
     		       (:http-server :host :port))

         ;; Configure the database section
         (start-section :database-configuration "Database configuration")
         (configure-section :database-configuration configuration
     		       (:name :host :username :password :connection-type))

         ;; Configure logging section
         (start-section :logging-configuration "Logging configuration")
         (configure-section :logging-configuration configuration
     		       (:backend :debugging-levels :output-location :active-layers))
         (validate-configuration configuration)
         configuration))


File: cl-config.info,  Node: Use cases,  Up: Examples

6.1 Use cases
=============

* Menu:

* Debugging::          Example of application debugging configuration
* Logging::            Example of application logging configuration
* Testing::            Example of application testing configuration
* Deployment::         Example of application deployment configuration


File: cl-config.info,  Node: Debugging,  Next: Logging,  Up: Use cases

6.1.1 Debugging
---------------


File: cl-config.info,  Node: Logging,  Next: Testing,  Prev: Debugging,  Up: Use cases

6.1.2 Logging
-------------


File: cl-config.info,  Node: Testing,  Next: Deployment,  Prev: Logging,  Up: Use cases

6.1.3 Testing
-------------


File: cl-config.info,  Node: Deployment,  Prev: Testing,  Up: Use cases

6.1.4 Deployment
----------------


File: cl-config.info,  Node: Frontend,  Next: Custom option types,  Prev: Examples,  Up: Top

7 Frontend
**********

Configurations can be edited from a web interface.

   To start the web configuration editor, evaluate:


     (require :cl-config-web)
     (cfg.web:start-cl-config-web)

   and then point your browser to http://localhost:4242

 [image src="web-editor.png" ]


File: cl-config.info,  Node: Custom option types,  Next: System reference,  Prev: Frontend,  Up: Top

8 Custom option types
*********************

How to define custom option types


File: cl-config.info,  Node: System reference,  Next: References,  Prev: Custom option types,  Up: Top

9 System reference
******************

 -- Class: cl-config:configuration-installer
     Class precedence list: `configuration-installer, installer,
     funcallable-standard-object, function, standard-object, t'

     The class for configuration installers

 -- Class: cl-config:configuration-schema
     Class precedence list: `configuration-schema, standard-object, t'

     Slots:
        * `name' -- initargs: `:name'

          The configuration-schema name

        * `parents' -- initargs: `:parents'

          Configuration-Schema mixins

        * `title' -- initargs: `:title'

          Configuration-Schema title

        * `direct-sections' -- initargs: `:direct-sections'

          Configuration-Schema direct-sections

        * `documentation' -- initargs: `:documentation'

          Configuration-Schema documentation

     A configuration-schema

 -- Class: cl-config:configuration
     Class precedence list: `configuration, standard-object, t'

     Slots:
        * `name' -- initargs: `:name'

          The configuration name

        * `title' -- initargs: `:title'

          Configuration title

     The configuration class

 -- Class: cl-config:installer
     Class precedence list: `installer, funcallable-standard-object,
     function, standard-object, t'

     The main installer class. Installer instances are funcallable

 -- Class: cl-config:standard-installer
     Class precedence list: `standard-installer, wizard-installer,
     configuration-installer, installer, funcallable-standard-object,
     function, standard-object, t'

     standard-intallers are installers used for installing
     configurations in a wizard fashion

 -- Class: cl-config:wizard-installer
     Class precedence list: `wizard-installer, installer,
     funcallable-standard-object, function, standard-object, t'

     The class for wizard installers

 -- Function: cl-config:cfg* path &optional configuration
     Function for getting a configuration value (the functional version
     of the cfg macro)    path can be one of:
        * A list with the form (<section> <option>).       Example:

          (cfg* '(:database-configuration :username))

        * A symbol with the form <section>.<option>      Example:

          (cfg* :database-configuration.username)

        The default configuration used is *configuration* (the current
     configuration)

 -- Function: cl-config:find-configuration-schema name
     Get a configuration-schema by its name

 -- Function: cl-config:find-configuration name
     Get a configuration by its name

 -- Function: cl-config:find-installer name
     Gets an installer by name

 -- Function: cl-config:register-installer installer
     Registers an installer. The installer can then be obtained via
     find-installer

 -- Function: cl-config.web:start-cl-config-web &optional configuration
     Starts the web configuration editor

     Default arguments are in standard-cl-config-web-configuration

     Evaluate (cfg.web:start-cl-config-web) and point your browser to
     http://localhost:4242

 -- Function: cl-config.web:stop-cl-config-web
     Stops the web configuration editor

 -- Macro: cl-config:cfg path &optional configuration
     Macro for getting a configuration value.     path can be one of:
        * A list with the form (<section> <option>).       Example:

          (cfg (:database-configuration :username))

        * A symbol with the form <section>.<option>       Example:

          (cfg :database-configuration.username)

          The default configuration used is *configuration* (the
          current configuration)

 -- Macro: cl-config:define-configurable-function name args &body body
     Defines a configurable function.     See macroexpansion to
     understand what it does

     Example:

             (cfg:define-configurable-function connect (&configuration (conf 'postgres-database-configuration))
                 (cfg:with-configuration-values (database-name username password host)
          	   configuration
                 (connect database-name username password host)))

     And then:

             (connect :database-name "My database"
                      :host "localhost"
                      :username "foo"
                      :password "bar")

 -- Macro: cl-config:define-configuration-schema-option-type type args
          &body body
     Define a custom configuration-schema option type.       Example:

               (define-configuration-schema-option-type :email (&rest args)
                   (apply #'make-instance 'email-configuration-schema-option-type
          	     args))

 -- Macro: cl-config:define-configuration-schema name parents &rest args
     Syntax for defining a configuration-schema.

     Parameters:
        * name `-' The name of the schema

        * parents `-' A list of schema parents

        Comments:
        * A configuration schema can inherit from several parents.

        * A title parameter is required to define the schema (see
          example below)

        Example:

           (cfg::define-configuration-schema postgres-database-configuration ()
             (:title "Postgres database configuration")
             (:documentation "Postgres database configuration")
             (:section :database-configuration "Database configuration"
                (:documentation "Section for configuring the database")
                (:connection-type "Connection type"
                    (:one-of (:socket "Socket"
          			    :configuration 'db-socket-configuration)
          		   (:tcp "TCP"
          			 :configuration 'db-tcp-configuration)))
                (:username "Username" :text :documentation "The database engine username")
                (:password "Password" :text :documentation "The database engine password")
                (:database-name "Database name" :text)
                (:host "Host" :text :documentation "The database host")
                (:database-parameters "Database parameters" :text :default "" :advanced t)))

 -- Macro: cl-config:define-configuration-validator
          configuration-schema configuration &body body
     Defines a validator on a configuration.

     Example:

             (cfg::define-configuration-validator postgres-database-configuration (configuration)
               (cfg:with-configuration-section :database-configuration
                 (cfg:with-configuration-values
                      (database-name username password host) configuration
                     (handler-bind
          	     (postmodern:connect database-name username password host)
          	        (postmodern:database-error (error)
          		  (cfg::validation-error
          		   (cl-postgres::message error)))))))

 -- Macro: cl-config:define-configuration name parents &rest args
     Create and register a configuration    Example:

             (define-configuration debug-configuration (standard-configuration)
              (:configuration-schema standard-configuration)
              (:title "Debug configuration")
              (:section :database-configuration
                  (:database-name "debug-database"))
              (:section :logging-configuration
                 (:output-location :standard-output)
                 (:active-layers (:debugging :database))
                 (:debugging-levels (:info :warning :error)))
              (:section :webapp-configuration
          	      (:catch-errors nil))
              (:documentation "Debugging configuration scheme"))

 -- Macro: cl-config:define-installer name &key &body body
     Define a vanilla installer

 -- Macro: cl-config:define-option-processor type value &body body
     Define a processor for a custom type

 -- Macro: cl-config:define-option-validator type value condition
          error-msg &rest args
     Define a validator for a custom type

     Example:

               (define-option-validator email-configuration-schema-option-type
                  (value option)
                    (valid-mail-address-p value)
                          "~A is not a valid email address in ~A" value option)

 -- Macro: cl-config:define-standard-installer name &key &body body
     Defines a standard-installer

 -- Macro: cl-config:define-wizard-installer name &key &body body
     Define a wizard installer

 -- Macro: cl-config:idefun name args &body body
     Defines a installer function

 -- Macro: cl-config:make-configuration name parents &rest args
     Create a configuration without registering it globally

 -- Macro: cl-config:with-configuration-section section-name &body body
     Executes body in the context of the given configuration section

     Example:

             (with-configuration test-configuration
                 (with-configuration-section :database-configuration
          	 (cfg :username)))

 -- Macro: cl-config:with-configuration-values values configuration
          &body body
     Macro for binding a configuration option values

     Example:

             (with-configuration test-configuration
                 (with-configuration-section :database-configuration
          	 (with-configuration-values (username) *configuration*
          	   username)))

 -- Macro: cl-config:with-configuration configuration-name &body body
     Executes body in the context of the given configuration    Example:

             (with-configuration test-configuration
                 (cfg (:database-configuration :username)))

 -- Macro: cl-config:with-current-configuration-values values &body body
     The same as with-configuration-values but using the current
     configuration *configuration*

     Example:

             (with-configuration test-configuration
                 (with-configuration-section :database-configuration
          	 (with-current-configuration-values (username)
          	   username)))

 -- Macro: cl-config:with-input bindings &body body
     Wizard installer operation. Asks for input.

 -- Macro: cl-config:with-schema-validation &optional &body body
     Executes body validating or or not the configurations created in
     body context (depending the value of value).     The default when
     using this macro is to not validate.     This macro is more
     commonly used for internal implementation options.

     Example:

             (with-schema-validation (nil)
                 (setf (cfg :database-configuration.username) 2323))

 -- Variable: cl-config:*configuration-schemas*
     The defined configuration-schemas. Access the confiuration-schemas
     through the find-configuration-schema function

 -- Variable: cl-config:*configuration*
     The current configuration. Use with-configuration macro to set this

 -- Variable: cl-config:*configurations*
     The defined configurations. Use find-configuration to access
     configurations by name


File: cl-config.info,  Node: References,  Next: Index,  Prev: System reference,  Up: Top

10 References
*************

[Common Lisp Directory]  [Common Lisp Wiki]

   [Common Lisp Directory]: http://common-lisp.net  [Common Lisp Wiki]:
http://www.cliki.net


File: cl-config.info,  Node: Index,  Prev: References,  Up: Top

11 Index
********

* Menu:

* Concept Index::          The concept index
* Class Index::            The classes index
* Function / Macro Index:: The functions and macros index
* Variable Index::         The variables index


File: cl-config.info,  Node: Concept Index,  Next: Class Index,  Up: Index

11.1 Concept Index
==================

 [index ]
* Menu:

* boolean:                               Boolean.               (line 6)
* configuration schema:                  Configuration schemas. (line 6)
* conventions:                           Conventions.           (line 6)
* debugging:                             Debugging.             (line 6)
* deployment:                            Deployment.            (line 6)
* email:                                 Email.                 (line 6)
* examples:                              Examples.              (line 6)
* feedback:                              Feedback.              (line 6)
* installation:                          Installation.          (line 6)
* installer:                             Installer.             (line 6)
* integer:                               Integer.               (line 6)
* introduction:                          Introduction.          (line 6)
* list:                                  List.                  (line 6)
* logging:                               Logging.               (line 6)
* one of:                                One of.                (line 6)
* option type:                           Built-in option types. (line 6)
* overview:                              Overview.              (line 6)
* pathaname:                             Pathname.              (line 6)
* reference:                             References.            (line 6)
* serialization:                         Configurations serialization.
                                                                (line 6)
* summary:                               Summary.               (line 6)
* testing:                               Testing.               (line 6)
* text:                                  Text.                  (line 6)
* url:                                   Url.                   (line 6)


File: cl-config.info,  Node: Class Index,  Next: Function / Macro Index,  Prev: Concept Index,  Up: Index

11.2 Class Index
================

 [index ]
* Menu:

* cl-config:configuration:               System reference.     (line 39)
* cl-config:configuration-installer:     System reference.     (line  7)
* cl-config:configuration-schema:        System reference.     (line 13)
* cl-config:installer:                   System reference.     (line 53)
* cl-config:standard-installer:          System reference.     (line 59)
* cl-config:wizard-installer:            System reference.     (line 67)


File: cl-config.info,  Node: Function / Macro Index,  Next: Variable Index,  Prev: Class Index,  Up: Index

11.3 Function / Macro Index
===========================

 [index ]
* Menu:

* cl-config.web:start-cl-config-web:     System reference.    (line 100)
* cl-config.web:stop-cl-config-web:      System reference.    (line 108)
* cl-config:cfg:                         System reference.    (line 111)
* cl-config:cfg*:                        System reference.    (line  73)
* cl-config:define-configurable-function: System reference.   (line 124)
* cl-config:define-configuration:        System reference.    (line 198)
* cl-config:define-configuration-schema: System reference.    (line 150)
* cl-config:define-configuration-schema-option-type: System reference.
                                                              (line 143)
* cl-config:define-configuration-validator: System reference. (line 183)
* cl-config:define-installer:            System reference.    (line 214)
* cl-config:define-option-processor:     System reference.    (line 217)
* cl-config:define-option-validator:     System reference.    (line 221)
* cl-config:define-standard-installer:   System reference.    (line 231)
* cl-config:define-wizard-installer:     System reference.    (line 234)
* cl-config:find-configuration:          System reference.    (line  90)
* cl-config:find-configuration-schema:   System reference.    (line  87)
* cl-config:find-installer:              System reference.    (line  93)
* cl-config:idefun:                      System reference.    (line 237)
* cl-config:make-configuration:          System reference.    (line 240)
* cl-config:register-installer:          System reference.    (line  96)
* cl-config:with-configuration:          System reference.    (line 263)
* cl-config:with-configuration-section:  System reference.    (line 243)
* cl-config:with-configuration-values:   System reference.    (line 253)
* cl-config:with-current-configuration-values: System reference.
                                                              (line 269)
* cl-config:with-input:                  System reference.    (line 280)
* cl-config:with-schema-validation:      System reference.    (line 283)


File: cl-config.info,  Node: Variable Index,  Prev: Function / Macro Index,  Up: Index

11.4 Variable Index
===================

 [index ]
* Menu:

* cl-config:*configuration*:             System reference.    (line 298)
* cl-config:*configuration-schemas*:     System reference.    (line 294)
* cl-config:*configurations*:            System reference.    (line 301)



Tag Table:
Node: Top1230
Node: Introduction3245
Node: Summary3771
Node: Installation3930
Node: Feedback4229
Node: Conventions4409
Node: Overview5884
Node: Configuration schemas6814
Node: Built-in option types10939
Node: Text11548
Node: Integer11931
Node: Boolean12250
Node: Email12616
Node: Url12918
Node: Pathname13319
Node: One of13789
Node: List14322
Node: Configurations14866
Node: Working with configurations15191
Node: Configurations serialization15415
Node: Installer15666
Node: Installers overview16167
Node: Defining installers17017
Node: Working with installers17531
Node: Installer language19906
Node: Installer examples23283
Node: Installer frontends25643
Node: Web installer frontend26010
Node: REPL installer frontend26182
Node: Ncurses installer frontend26391
Node: Examples26575
Node: Use cases34366
Node: Debugging34739
Node: Logging34846
Node: Testing34965
Node: Deployment35085
Node: Frontend35195
Node: Custom option types35577
Node: System reference35761
Ref: Class cl-config:configuration-installer35906
Ref: Class cl-config:configuration-schema36126
Ref: Class cl-config:configuration36736
Ref: Class cl-config:installer37023
Ref: Class cl-config:standard-installer37227
Ref: Class cl-config:wizard-installer37540
Ref: Function cl-config:cfg*37739
Ref: Function cl-config:find-configuration-schema38249
Ref: Function cl-config:find-configuration38349
Ref: Function cl-config:find-installer38435
Ref: Function cl-config:register-installer38511
Ref: Function cl-config.web:start-cl-config-web38653
Ref: Function cl-config.web:stop-cl-config-web38933
Ref: Macro cl-config:cfg39021
Ref: Macro cl-config:define-configurable-function39484
Ref: Macro cl-config:define-configuration-schema-option-type40143
Ref: Macro cl-config:define-configuration-schema40488
Ref: Macro cl-config:define-configuration-validator41900
Ref: Macro cl-config:define-configuration42612
Ref: Macro cl-config:define-installer43388
Ref: Macro cl-config:define-option-processor43480
Ref: Macro cl-config:define-option-validator43590
Ref: Macro cl-config:define-standard-installer43987
Ref: Macro cl-config:define-wizard-installer44090
Ref: Macro cl-config:idefun44188
Ref: Macro cl-config:make-configuration44272
Ref: Macro cl-config:with-configuration-section44397
Ref: Macro cl-config:with-configuration-values44706
Ref: Macro cl-config:with-configuration45078
Ref: Macro cl-config:with-current-configuration-values45335
Ref: Macro cl-config:with-input45730
Ref: Macro cl-config:with-schema-validation45832
Ref: Variable cl-config:*configuration-schemas*46288
Ref: Variable cl-config:*configuration*46461
Ref: Variable cl-config:*configurations*46575
Node: References46711
Node: Index46971
Node: Concept Index47262
Node: Class Index49224
Node: Function / Macro Index49828
Node: Variable Index52051

End Tag Table
