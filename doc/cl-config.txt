START-INFO-DIR-ENTRY
* cl-config: (cl-config.info). A configuration library for Common Lisp.
END-INFO-DIR-ENTRY

cl-config - A configuration library for Common Lisp
***************************************************

This is cl-config Common Lisp library documentation

1 Introduction
**************

cl-config is a configuration library for Common Lisp

   You can get a copy and this manual at
`http://common-lisp.net/project/cl-config'

1.1 Summary
===========

cl-config is a configuration library for Common Lisp

1.2 Installation
================

To install cl-config, start a Common Lisp session and type the
following:

     CL-USER> (require :asdf-install)
     CL-USER> (asdf-install:asdf-install 'cl-config)

1.3 Feedback
============

Mail marianomontone at gmail dot com with feedback

1.4 Conventions
===============

Hear are some coding conventions we'd like to follow:

   * We _do_ believe in documentation. Document your dynamic variables,
     functions, macros and classes. Besides, provide a documentation
     from a wider perspective. Provide diagrams and arquitecture
     documentation; examples and tutorials, too. Consider using an
     automatic documentation generator (see the bitacora package in the
     dependencies).

   * We don't want functions to be shorter than the should nor longer
     than they should. There is no "every function should have at most
     ten lines of code" rule. We think that coding is like literature
     to a great extent. So you should strive for beauty and clarity.
     Again, that your code is object oriented doesn't imply that your
     methods will ideally have two lines of code and dispatch to
     somewhere else; that is not always good at all. It may be good
     from an object oriented point of view, but it is too low level. We
     want to think in terms of languages, that is higher level,
     instead of objects sending messages.

   * Use destructuring-bind or let or a pattern-matching library
     instead of car, cdr, cadr, and the like to obtain more readable
     code.

   * Use widely known Common Lisp coding guidelines:
     `http://web.archive.org/web/20050305123711/www.lisp.org/table/style.htm'


2 Overview
**********

CL-CONFIG is a configuration library for Common Lisp.

   The idea is to define configuration-schemas and get a proper way of:

   * Sharing and versioning your project's configuration schemas, but
     not your configurations. That way, you avoid overwriting
     configurations from different coders. Each coder has his own
     configurations that need to match the configuration schemas in the
     project. Whenever a project's configuration schema changes, each
     coder is reponsible of updating his configurations to match the
     new schemas.

   * Being able to define configuration schemas declaratively.

   * Provide configurations documentation and validation.

   * Edit configurations from a GUI.

   * Define your own option configurations types and provide validation
     for them.

3 Configuration schemas
***********************

Configuration schemas define the structure of a configuration.

   The syntax to define configuration schemas is the following:

     (define-configuration-schema _configuration-schema-name_
             ({_parent-configuration-schema_}*)
             (:title _configuration-schema-title_)
             [(:documentation _configuration-schema-documentation_)]
             {_configuration-schema-section_}*)

   Where:

   * _configuration-schema-name_ is the name of the
     configuration-schema and the configuration-schema is globally
     identified by it. See _find-configuration-schema_

   * _parent-configuration-schema_ is the configuration schema we
     inherit from. Inheriting from a configuration schema means adding
     its sections to the child schema. Configuration schemas can
     inherit from several parents

   * _configuration-schema-title_ is a string describing very shortly
     the configuration schema. It is used to display configuration
     schemas from the editing GUI. It is a required argument.

   * _configuration-schema-documentation_ is the configuration schema
     documentation. This is not a required argument. It is also used
     from the editing GUI and is very useful for the configuration
     schema user.

   Each configuration schema section follows this syntax:

        (:section _section-identifier_ _section-title_
           [(:documentation _section-documentation_)]
           {_option-schema_}*)

   Where:
   * _section-identifier_ is a keyword that uniquely identifies the
     section

   * _section-title_ is a string describing very shortly the section.
     It is used to display sections from the editing GUI.

   And option schemas are specified like this:

     (_option-identifier_ _option-title_ _option-type_ {_option-parameter_*})

   where:

   * _option-identifier_ is a keyword that uniquely identifies the
     option

   * _option-title_ is a string describing very shortly the option. It
     is used to display sections from the editing GUI.

   * _option-type_ is the option type. There are different ways of
     specifying an option type, depending on the type.

   * _option-parameters_ may be:

        - _:documentation_ followed by the documentation string. To
          document the option.

        - _default_ followed by the default option value. If the
          configuration leaves the option unspecified, then it has the
          default value.

        - _optional_, followed by true (t) of false (nil). Determines
          if the option value can be left unspecified. Default is false.

        - _avanced_, followed by true (t) or false (nil). Determines if
          the option category is "advanced" (default is false)

   Here is a simple example:

     (define-configuration-schema database-configuration ()
        (:title "Database configuration")
        (:documentation "Database configuration")
        (:section :database-configuration "Database configuration"
           (:documentation "Section for configuring the database")
           (:connection-type "Connection type"
               (:one-of (:socket "Socket"
     			    :configuration 'db-socket-configuration)
     		   (:tcp "TCP"
     			 :configuration 'db-tcp-configuration)))
           (:username "Username" :text :documentation "The database engine username")
           (:password "Password" :text :documentation "The database engine password")
           (:database-name "Database name" :text)
           (:database-parameters "Database parameters" :text :default "" :advanced t)))

   That is a typical configuration schema needed to connect to a
database.

   It has only one section _database-configuration_ where the user is
supposed to specify the connection type, the database name, the
username, password, and extra parameters needed to connect to a
database. In this case, most of the options are of type _:text_.

3.1 Built-in option types
=========================

3.1.1 Text
----------

The text option type is specified with _:text_. It ensures that the the
option value is of type string.

   Example:

     (:username "Username" :text :documentation "The database engine username")
     (:password "Password" :text :documentation "The database engine password")

3.1.2 Integer
-------------

The integer option type is specified with _:integer_. It ensures that
the the option value is of type integer.

   Example:

     (:port "Port" :integer :documentation "Web application port")

3.1.3 Boolean
-------------

The boolean option type is specified with _:boolean_. It ensures that
the the option value is of type boolean (t or nil).

   Example:

     (:catch-errors-p "Catch errors?" :boolean :documentation "Whether to handle application errors")

3.1.4 Email
-----------

The email option type is specified with _:email_. It ensures that the
the option value is a valid email string.

   Example:

     (:port "Email" :email :documentation "User email")

3.1.5 Url
---------

The url option type is specified with _:url_. It ensures that the the
option value is a valid url. The option value is converted to a url
(cl-url) if it is a string, or left unmodified if already a url.

   Example:

     (:host "Host" :url :documentation "The web application host")

3.1.6 Pathname
--------------

The pathaname option type is specified with _:path_. It ensures that
the the option value is a valid pathname and the file or directory
exists. The option value is converted to a pathname if it is a string,
or left unmodified if already a pathname.

   Example:

     (:stylesheet "Stylesheet" :pathname :documentation "The stylesheet file")

3.1.7 One of
------------

The _one of_ option type is specified with _:one-of_ followed by the
list of options, all between parenthesis. It is ensured that the option
value is one of the options listed. Options are specified as a list
with the option-identifier as a keyword, and the option title with a
string.

   Example:

     (:connection-type "Connection type"
           (:one-of (:socket "Socket")
     	       (:tcp "TCP")))

3.1.8 List
----------

The _list_ option type is specified with _:list_ followed by the list
of options, all between parenthesis. It is ensured that the option
value is a subset of the options listed. Options are specified as a
list with the option-identifier as a keyword, and the option title with
a string.

   Example:

     (:debugging-levels "Debugging levels" (:list (:info "Info")
     					     (:warning "Warning")
     					     (:profile "Profile")))

4 Configurations
****************

How to define configurations

4.1 Working with configurations
===============================

The API for working with configurations

4.2 Configurations serialization
================================

There are two output backends: an sexp-backend and a xml-backend

5 Installer
***********

Explanations on how to build an application installer

6 Examples
**********


     (define-configuration-schema database-configuration ()
        (:title "Database configuration")
        (:documentation "Database configuration")
        (:section :database-configuration "Database configuration"
           (:documentation "Section for configuring the database")
           (:connection-type "Connection type"
               (:one-of (:socket "Socket"
     			    :configuration 'db-socket-configuration)
     		   (:tcp "TCP"
     			 :configuration 'db-tcp-configuration)))
           (:username "Username" :text :documentation "The database engine username")
           (:password "Password" :text :documentation "The database engine password")
           (:database-name "Database name" :text)
           (:database-parameters "Database parameters" :text :default "" :advanced t)))

     (define-configuration-schema cl-config-application-configuration ()
       (:title "CL-CONFIG Application Configuration")
       (:documentation "CL-CONFIG Application Configuration")
       (:section :configuration-settings "Configuration settings"
     	    (:load-configs-from-file "Load configurations from file"
     				     :boolean :default t)
     	    (:load-configs-file "Configurations file" :pathname :optional t)
     	    (:select-config-from-file "Select configuration from file"
     				      :boolean :default t)
     	    (:select-config-file "Select configuration file" :pathname :optional t)))

     (define-configuration-schema db-socket-configuration ()
         (:title "Socket configuration")
         (:section :db-socket-configuration "Socket configuration"
             (:path "Socket" :pathname
                    :default "/tmp/socket.soc")))

     (define-configuration-schema db-tcp-configuration ()
         (:title "TCP configuration")
         (:section "TCP configuration"
             (:url "URL" :url
                   :default "localhost")))

     (define-configuration-schema logging-configuration ()
         (:title "Logging configuration")
         (:documentation "Logging configuration")
         (:section :logging-configuration "Logging configuration"
             (:documentation "Logging configuration")
             (:backend "Backend"
                 (:one-of (:log5 "Log5")))
     	(:debugging-levels "Debugging levels" (:list (:info "Info")
     						     (:warning "Warning")
     						     (:profile "Profile")))
     	(:output-location "Output location"
                         (:one-of (:standard-output "Standard output"
     					       :default *standard-output*)
     			     (:file "File" :default "/tmp/log.log"))
     		    :default '*standard-output)
             (:active-layers "Active layers"
     			(:list
     			 (:debugging "Debugging"
     				     :configuration 'debugging-layer)
     			 (:database "Database"
     				    :configuration database-layer)
     			 (:control-flow "Control flow")
     			 (:system "System")))))

     (define-configuration-schema webapp-configuration (logging-configuration)
         (:title "Web application configuration")
         (:documentation "Web application configuration")
         (:section :webapp-configuration "Web application configuration"
             (:documentation "Web application configuration")
             (:http-server "HTTP server"
                 (:one-of (:apache "Apache"
     			      :configuration 'apache-configuration)
                         (:hunchentoot "Hunchentoot"
     				  :configuration 'hunchentoot-configuration)))
             (:host "Host" :text :default "localhost")
     	(:port "Port" :integer :default 8080)
     	(:catch-errors "Catch errors" :boolean :default t)))

     (define-configuration-schema standard-configuration
         (cl-config-application-configuration
          webapp-configuration
          database-configuration)
           (:title "Standard configuration")
           (:documentation "Standard configuration for a Gestalt application")
           (:page-title "Page title" :text :default "Gestalt application"))

     (define-configuration standard-configuration ()
       (:title "Standard configuration")
       (:configuration-schema standard-configuration)
       (:section :database-configuration
     	    (:connection-type :socket
     			      :value2
     			      '(:db-socket-configuration
     				(:path "/tmp/my-socket.soc")))
     	    (:username "root")
     	    (:password "root")
     	    (:database-name "standard-database"))
       (:section :webapp-configuration
     	    (:http-server :hunchentoot))
       (:section :logging-configuration
     	    (:active-layers (:debugging))
     	    (:output-location :standard-output)
     	    (:debugging-levels (:info))
     	    (:backend :log5)))

     (define-configuration debug-configuration (standard-configuration)
         (:configuration-schema standard-configuration)
         (:title "Debug configuration")
         (:section :database-configuration
             (:database-name "debug-database"))
         (:section :logging-configuration
            (:output-location :standard-output)
            (:active-layers (:debugging :database))
            (:debugging-levels (:info :warning :error)))
         (:section :webapp-configuration
     	      (:catch-errors nil))
         (:documentation "Debugging configuration scheme"))

     (define-configuration test-configuration (standard-configuration)
         (:configuration-schema standard-configuration)
         (:title "Test configuration")
         (:section :database-configuration
             (:database-name "test-database"))
         (:section :logging-configuration
            (:output-location :file :value2 "/tmp/test.log")
            (:active-layers (:debugging :database) :inherit t)
            (:debugging-levels (:warning :error)))
         (:documentation "Testing configuration scheme"))

   The typical attributes types are, :text, where the user fill text
in; :one-of options*, where the user chooses one of the options in
options*; :list list*, where the user selects one or more of the items
of the list *list; :bool, a boolean, :maybe option, where the user can
disable or enable option, etc.

   Configurations can inherit from several configurations (that act
like mixins). The same as with classes or models or templates. So, for
example, web-app-configuration inherits from logging-configuration.
That means the web-app-configuration will have the sections defined in
logging-configuration too.

   Documentation is used as a section or configuration help from the
UI. From the UI, each section is shown collapsable and there's and
option for showing/hiding advanced fields, and the help button.

   The user can define several configuration schemes for an application
and switch between the configurations. For example, there will probably
be a "development configuration", a "deployment configuration", a
"testing configuration", and so on.

   There's no need for a GUI, although it is desirable. We can define
configurations with files, for example:

     (define-configuration-scheme standard-configuration-scheme ()
        (:configuration standard-configuration)
        (:database-configuration
            (:connection-type :socket
                (:db-socket-configuration
                   (:path "/tmp/my-socket.soc")))
            (:username "root")
            (:password "root")
            (:database-name "standard-database"))
        (:webapp-configuration
            (:host "localhost")
            (:http-server :hunchentoot)))

     (define-configuration-scheme debug-configuration-scheme (standard-configuration-scheme)
         (:configuration standard-configuration)
         (:database-configuration
             (:database-name "debug-database"))
         (:logging-configuration
            (:output-location :file "/tmp/debug.log")
            (:active-layers :debugging :database
                (:debugging-levels :info :warning :error)))
         (:documentation "Debugging configuration scheme"))

     (define-configuration-scheme test-configuration-scheme (standard-configuration-scheme)
         (:configuration standard-configuration)
         (:database-configuration
             (:database-name "test-database"))
         (:logging-configuration
            (:output-location :file "/tmp/test.log")
            (:active-layers :debugging :database
                (:debugging-levels :warning :error)))
         (:documentation "Testing configuration scheme"))

   And then we attach the desired configuration to the application:

     (defapplication my-application (standard-application)
        ...
        (:configuration 'debug-configuration-scheme))

6.1 Use cases
=============

6.1.1 Debugging
---------------

6.1.2 Logging
-------------

6.1.3 Testing
-------------

6.1.4 Deployment
----------------

7 Configuration editing
***********************

Configurations can be edited from a web interface.

   To start the web configuration editor, evaluate:


     (require :cl-config-web)
     (cfg.web:start-cl-config-web)

   and then point your browser to http://localhost:4242

 8 Custom option types
*********************

How to define custom option types

9 System reference
******************

 -- Function: cl-config:cfg* path &optional configuration
     Function for getting a configuration value (the functional version
     of the cfg macro)    path can be one of:
        * A list with the form (<section> <option>).       Example:

          (cfg* '(:database-configuration :username))

        * A symbol with the form <section>.<option>      Example:

          (cfg* :database-configuration.username)

        The default configuration used is *configuration* (the current
     configuration)

 -- Function: cl-config:find-configuration-schema name
     Get a configuration-schema by its name

 -- Function: cl-config:find-configuration name
     Get a configuration by its name

 -- Function: cl-config.web:start-cl-config-web &optional configuration
     Starts the web configuration editor

     Default arguments are in standard-cl-config-web-configuration

     Evaluate (cfg.web:start-cl-config-web) and point your browser to
     http://localhost:4242

 -- Function: cl-config.web:stop-cl-config-web
     Stops the web configuration editor

 -- Macro: cl-config:cfg path &optional configuration
     Macro for getting a configuration value.     path can be one of:
        * A list with the form (<section> <option>).       Example:

          (cfg (:database-configuration :username))

        * A symbol with the form <section>.<option>       Example:

          (cfg :database-configuration.username)

          The default configuration used is *configuration* (the
          current configuration)

 -- Macro: cl-config:define-configurable-function name args &body body
     Defines a configurable function.     See macroexpansion to
     understand what it does

     Example:

             (cfg:define-configurable-function connect (&configuration (conf 'postgres-database-configuration))
                 (cfg:with-configuration-values (database-name username password host)
          	   configuration
                 (connect database-name username password host)))

     And then:

             (connect :database-name "My database"
                      :host "localhost"
                      :username "foo"
                      :password "bar")

 -- Macro: cl-config:define-configuration-schema-option-type type args
          &body body
     Define a custom configuration-schema option type.       Example:

               (define-configuration-schema-option-type :email (&rest args)
                   (apply #'make-instance 'email-configuration-schema-option-type
          	     args))

 -- Macro: cl-config:define-configuration-schema name parents &rest args
     Syntax for defining a configuration-schema.

     Parameters:
        * name `-' The name of the schema

        * parents `-' A list of schema parents

        Comments:
        * A configuration schema can inherit from several parents.

        * A title parameter is required to define the schema (see
          example below)

        Example:

           (cfg::define-configuration-schema postgres-database-configuration ()
             (:title "Postgres database configuration")
             (:documentation "Postgres database configuration")
             (:section :database-configuration "Database configuration"
                (:documentation "Section for configuring the database")
                (:connection-type "Connection type"
                    (:one-of (:socket "Socket"
          			    :configuration 'db-socket-configuration)
          		   (:tcp "TCP"
          			 :configuration 'db-tcp-configuration)))
                (:username "Username" :text :documentation "The database engine username")
                (:password "Password" :text :documentation "The database engine password")
                (:database-name "Database name" :text)
                (:host "Host" :text :documentation "The database host")
                (:database-parameters "Database parameters" :text :default "" :advanced t)))

 -- Macro: cl-config:define-configuration-validator
          configuration-schema configuration &body body
     Defines a validator on a configuration.

     Example:

             (cfg::define-configuration-validator postgres-database-configuration (configuration)
               (cfg:with-configuration-section :database-configuration
                 (cfg:with-configuration-values
                      (database-name username password host) configuration
                     (handler-bind
          	     (postmodern:connect database-name username password host)
          	        (postmodern:database-error (error)
          		  (cfg::validation-error
          		   (cl-postgres::message error)))))))

 -- Macro: cl-config:define-configuration name parents &rest args
     Create and register a configuration    Example:

             (define-configuration debug-configuration (standard-configuration)
              (:configuration-schema standard-configuration)
              (:title "Debug configuration")
              (:section :database-configuration
                  (:database-name "debug-database"))
              (:section :logging-configuration
                 (:output-location :standard-output)
                 (:active-layers (:debugging :database))
                 (:debugging-levels (:info :warning :error)))
              (:section :webapp-configuration
          	      (:catch-errors nil))
              (:documentation "Debugging configuration scheme"))

 -- Macro: cl-config:define-option-processor type value &body body
     Define a processor for a custom type

 -- Macro: cl-config:define-option-validator type value condition
          error-msg &rest args
     Define a validator for a custom type

     Example:

               (define-option-validator email-configuration-schema-option-type
                  (value option)
                    (valid-mail-address-p value)
                          "~A is not a valid email address in ~A" value option)

 -- Macro: cl-config:make-configuration name parents &rest args
     Create a configuration without registering it globally

 -- Macro: cl-config:with-configuration-section section-name &body body
     Executes body in the context of the given configuration section

     Example:

             (with-configuration test-configuration
                 (with-configuration-section :database-configuration
          	 (cfg :username)))

 -- Macro: cl-config:with-configuration-values values configuration
          &body body
     Macro for binding a configuration option values

     Example:

             (with-configuration test-configuration
                 (with-configuration-section :database-configuration
          	 (with-configuration-values (username) *configuration*
          	   username)))

 -- Macro: cl-config:with-configuration configuration-name &body body
     Executes body in the context of the given configuration    Example:

             (with-configuration test-configuration
                 (cfg (:database-configuration :username)))

 -- Macro: cl-config:with-current-configuration-values values &body body
     The same as with-configuration-values but using the current
     configuration *configuration*

     Example:

             (with-configuration test-configuration
                 (with-configuration-section :database-configuration
          	 (with-current-configuration-values (username)
          	   username)))

 -- Macro: cl-config:with-schema-validation &optional &body body
     Executes body validating or or not the configurations created in
     body context (depending the value of value).     The default when
     using this macro is to not validate.     This macro is more
     commonly used for internal implementation options.

     Example:

             (with-schema-validation (nil)
                 (setf (cfg :database-configuration.username) 2323))

 -- Variable: cl-config:*configuration-schemas*
     The defined configuration-schemas. Access the confiuration-schemas
     through the find-configuration-schema function

 -- Variable: cl-config:*configuration*
     The current configuration. Use with-configuration macro to set this

 -- Variable: cl-config:*configurations*
     The defined configurations. Use find-configuration to access
     configurations by name

10 References
*************

[Common Lisp Directory]  [Common Lisp Wiki]

   [Common Lisp Directory]: http://common-lisp.net  [Common Lisp Wiki]:
http://www.cliki.net

11 Index
********

11.1 Concept Index
==================

boolean:                                       Véase 3.1.3.  (línea 220)
configuration schema:                          Véase 3.      (línea  95)
conventions:                                   Véase 1.4.    (línea  40)
debugging:                                     Véase 6.1.1.  (línea 510)
deployment:                                    Véase 6.1.4.  (línea 519)
email:                                         Véase 3.1.4.  (línea 230)
examples:                                      Véase 6.      (línea 313)
feedback:                                      Véase 1.3.    (línea  35)
installation:                                  Véase 1.2.    (línea  26)
installer:                                     Véase 5.      (línea 308)
integer:                                       Véase 3.1.2.  (línea 210)
introduction:                                  Véase 1.      (línea  13)
list:                                          Véase 3.1.8.  (línea 278)
logging:                                       Véase 6.1.2.  (línea 513)
one of:                                        Véase 3.1.7.  (línea 263)
option type:                                   Véase 3.1.    (línea 196)
overview:                                      Véase 2.      (línea  71)
pathaname:                                     Véase 3.1.6.  (línea 251)
reference:                                     Véase 10.     (línea 753)
serialization:                                 Véase 4.2.    (línea 303)
summary:                                       Véase 1.1.    (línea  21)
testing:                                       Véase 6.1.3.  (línea 516)
text:                                          Véase 3.1.1.  (línea 199)
url:                                           Véase 3.1.5.  (línea 240)
11.2 Class Index
================

11.3 Function / Macro Index
===========================

cl-config.web:start-cl-config-web:             Véase 9.      (línea 561)
cl-config.web:stop-cl-config-web:              Véase 9.      (línea 569)
cl-config:cfg:                                 Véase 9.      (línea 572)
cl-config:cfg*:                                Véase 9.      (línea 541)
cl-config:define-configurable-function:        Véase 9.      (línea 585)
cl-config:define-configuration:                Véase 9.      (línea 659)
cl-config:define-configuration-schema:         Véase 9.      (línea 611)
cl-config:define-configuration-schema-option-type:Véase 9.   (línea 604)
cl-config:define-configuration-validator:      Véase 9.      (línea 644)
cl-config:define-option-processor:             Véase 9.      (línea 675)
cl-config:define-option-validator:             Véase 9.      (línea 679)
cl-config:find-configuration:                  Véase 9.      (línea 558)
cl-config:find-configuration-schema:           Véase 9.      (línea 555)
cl-config:make-configuration:                  Véase 9.      (línea 689)
cl-config:with-configuration:                  Véase 9.      (línea 712)
cl-config:with-configuration-section:          Véase 9.      (línea 692)
cl-config:with-configuration-values:           Véase 9.      (línea 702)
cl-config:with-current-configuration-values:   Véase 9.      (línea 718)
cl-config:with-schema-validation:              Véase 9.      (línea 729)
11.4 Variable Index
===================

cl-config:*configuration*:                     Véase 9.      (línea 744)
cl-config:*configuration-schemas*:             Véase 9.      (línea 740)
cl-config:*configurations*:                    Véase 9.      (línea 747)
