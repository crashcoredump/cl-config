\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename cl-config.info
@settitle cl-config - A configuration library for Common Lisp

@set VERSION 0.1
@set DATE January 2011

@c Version and Contact Info
@set MAINTAINERSITE @uref{https://github.com/mmontone, maintainers webpage}
@set AUTHOR Mariano Montone
@set MAINTAINER Mariano Montone
@set MAINTAINEREMAIL @email{marianomontone at gmail dot com}
@set MAINTAINERCONTACT @uref{mailto:marianomontone at gmail dot com,contact the maintainer}
@c %**end of header

@ifinfo
@format
START-INFO-DIR-ENTRY
* cl-config: (cl-config.info). A configuration library for Common Lisp.
END-INFO-DIR-ENTRY
@end format
@end ifinfo

@c Subheadings inside a table.
@macro tsubheading{text}
@ifinfo
@subsubheading \text\
@end ifinfo
@ifnotinfo
@item @b{\text\}
@end ifnotinfo
@end macro

@copying

This manual is for cl-config version @value{VERSION}.

Copyright @copyright{} 2011 Mariano Montone

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled ``GNU Free Documentation License.''

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom.''

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.
@end quotation
@end copying

@titlepage
@title cl-config
@subtitle A configuration library for Common Lisp
@subtitle Release @value{VERSION}
@author by Mariano Montone

@c Output the table of contents at the beginning.
@contents

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@ifnottex
@node Top
@top cl-config - A configuration library for Common Lisp

This is cl-config Common Lisp library documentation

@end ifnottex

@menu
* Introduction::                        What is cl-config?
* Overview::                            A cl-config overview
* Configuration schemas::               What configuration schemas are and how to define them
* Configurations::                      What configurations are and how to define them
* Installer::                           How to create an application installer
* Examples::                            Some examples
* Configuration editing::               Web tool for configuration editing
* Custom option types::                 How to define custom option types
* System reference::                    The system reference
* References::                          Related work
* Index::                               Complete index.

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Summary::                     A brief summary of what Gestalt is
* Installation::                How to install Gestalt
* Feedback::                    Bug reports, ideas, patches etc.
* Conventions::                 Type-setting conventions in the manual

Overview

Configuration schemas

Configurations

* Working with configurations::         The API to work with configurations
* Configurations serialization::        Configurations serialization

Installer

Examples

* Use cases::                           Typical use cases

Configuration editing

Custom option types

System References

References

Index

@end detailmenu
@end menu

@node Introduction
@chapter Introduction
@cindex introduction

cl-config is a configuration library for Common Lisp

You can get a copy and this manual at @url{http://common-lisp.net/project/cl-config}

@menu
* Summary::                     A brief summary of what cl-config is
* Installation::                How to install cl-config
* Feedback::                    Bug reports, ideas, patches etc.
* Conventions::                 Type-setting conventions in the manual
@end menu

@node Summary
@section Summary
@cindex summary

cl-config is a configuration library for Common Lisp

@node Installation
@section Installation
@cindex installation

To install cl-config, start a Common Lisp session and type the following:

@example
CL-USER> (require :asdf-install)
CL-USER> (asdf-install:asdf-install 'cl-config)
@end example

@node Feedback
@section Feedback
@cindex feedback

Mail marianomontone at gmail dot com with feedback

@node Conventions
@section Conventions
@cindex conventions

Hear are some coding conventions we'd like to follow:

@itemize @bullet

@item
We @emph{do} believe in documentation. Document your dynamic variables, functions, macros and classes. Besides, provide a documentation from a wider perspective. Provide diagrams and arquitecture documentation; examples and tutorials, too. Consider using an automatic documentation generator (see the bitacora package in the dependencies).

@item
We don't want functions to be shorter than the should nor longer than they should. There is no "every function should have at most ten lines of code" rule. We think that coding is like literature to a great extent. So you should strive for beauty and clarity. Again, that your code is object oriented doesn't imply that your methods will ideally have two lines of code and dispatch to somewhere else; that is not always good at all. It may be good from an object oriented point of view, but it is too low level. We want to think in terms of languages, that is higher level,  instead of objects sending messages.

@item
Use destructuring-bind or let or a pattern-matching library instead of car, cdr, cadr, and the like to obtain more readable code.

@item
Use widely known Common Lisp coding guidelines: @url{http://web.archive.org/web/20050305123711/www.lisp.org/table/style.htm}

@end itemize

@node Overview
@chapter Overview
@cindex overview 

CL-CONFIG is a configuration library for Common Lisp.

The idea is to define configuration-schemas and get a proper way of:

@itemize @bullet
@item
Sharing and versioning your project's configuration schemas, but not your configurations. That way, you avoid overwriting configurations from different coders. Each coder has his own configurations that need to match the configuration schemas in the project. Whenever a project's configuration schema changes, each coder is reponsible of updating his configurations to match the new schemas.

@item
Being able to define configuration schemas declaratively.

@item
Provide configurations documentation and validation.

@item
Edit configurations from a GUI.

@item
Define your own option configurations types and provide validation for them.
@end itemize

@node Configuration schemas
@chapter Configuration schemas
@cindex configuration schema

@menu
* Built-in option types::       The built-in option types
@end menu

Configuration schemas define the structure of a configuration.

The syntax to define configuration schemas is the following:

@example
(define-configuration-schema @emph{configuration-schema-name}
        (@{@emph{parent-configuration-schema}@}*)
        (:title @emph{configuration-schema-title})
        [(:documentation @emph{configuration-schema-documentation})]
        @{@emph{configuration-schema-section}@}*)
@end example

Where:

@itemize @bullet
@item
@emph{configuration-schema-name} is the name of the configuration-schema and the configuration-schema is globally identified by it. See @emph{find-configuration-schema}

@item
@emph{parent-configuration-schema} is the configuration schema we inherit from. Inheriting from a configuration schema means adding its sections to the child schema. Configuration schemas can inherit from several parents

@item
@emph{configuration-schema-title} is a string describing very shortly the configuration schema. It is used to display configuration schemas from the editing GUI. It is a required argument.

@item
@emph{configuration-schema-documentation} is the configuration schema documentation. This is not a required argument. It is also used from the editing GUI and is very useful for the configuration schema user.
@end itemize

Each configuration schema section follows this syntax:

@example
   (:section @emph{section-identifier} @emph{section-title}
      [(:documentation @emph{section-documentation})]
      @{@emph{option-schema}@}*)
@end example

Where:
@itemize @bullet
@item
@emph{section-identifier} is a keyword that uniquely identifies the section

@item
@emph{section-title} is a string describing very shortly the section. It is used to display sections from the editing GUI.
@end itemize

And option schemas are specified like this:

@example
(@emph{option-identifier} @emph{option-title} @emph{option-type} @{@emph{option-parameter}*@})
@end example

where:

@itemize @bullet
@item
@emph{option-identifier} is a keyword that uniquely identifies the option

@item
@emph{option-title} is a string describing very shortly the option. It is used to display sections from the editing GUI.

@item
@emph{option-type} is the option type. There are different ways of specifying an option type, depending on the type.

@item
@emph{option-parameters} may be:

@itemize @minus
@item
@emph{:documentation} followed by the documentation string. To document the option.

@item
@emph{default} followed by the default option value. If the configuration leaves the option unspecified, then it has the default value.

@item
@emph{optional}, followed by true (t) of false (nil). Determines if the option value can be left unspecified. Default is false.

@item
@emph{avanced}, followed by true (t) or false (nil). Determines if the option category is ``advanced'' (default is false)
@end itemize
@end itemize

Here is a simple example:

@example
(define-configuration-schema database-configuration ()
   (:title "Database configuration")
   (:documentation "Database configuration")
   (:section :database-configuration "Database configuration"
      (:documentation "Section for configuring the database")
      (:connection-type "Connection type"
          (:one-of (:socket "Socket"
			    :configuration 'db-socket-configuration)
		   (:tcp "TCP"
			 :configuration 'db-tcp-configuration)))
      (:username "Username" :text :documentation "The database engine username")
      (:password "Password" :text :documentation "The database engine password")
      (:database-name "Database name" :text)
      (:database-parameters "Database parameters" :text :default "" :advanced t)))
@end example

That is a typical configuration schema needed to connect to a database.

It has only one section @emph{database-configuration} where the user is supposed to specify the connection type, the database name, the username, password, and extra parameters needed to connect to a database. In this case, most of the options are of type @emph{:text}.

@node Built-in option types
@section Built-in option types
@cindex option type

@menu
* Text::                           The text option type
* Integer::                        The integer option type
* Boolean::                        The boolean option type
* Email::                          The email option type
* Url::                            The URL option type
* Pathname::                       The pathname option type
* One of::                         The ``one of'' option type
* List::                           The list option type
@end menu

@node Text
@subsection Text
@cindex text

The text option type is specified with @emph{:text}. It ensures that the the option value is of type string.

Example:

@example
(:username "Username" :text :documentation "The database engine username")
(:password "Password" :text :documentation "The database engine password")
@end example

@node Integer
@subsection Integer
@cindex integer

The integer option type is specified with @emph{:integer}. It ensures that the the option value is of type integer.

Example:

@example
(:port "Port" :integer :documentation "Web application port")
@end example

@node Boolean
@subsection Boolean
@cindex boolean

The boolean option type is specified with @emph{:boolean}. It ensures that the the option value is of type boolean (t or nil).

Example:

@example
(:catch-errors-p "Catch errors?" :boolean :documentation "Whether to handle application errors")
@end example

@node Email
@subsection Email
@cindex email

The email option type is specified with @emph{:email}. It ensures that the the option value is a valid email string.

Example:

@example
(:port "Email" :email :documentation "User email")
@end example

@node Url
@subsection Url
@cindex url

The url option type is specified with @emph{:url}. It ensures that the the option value is a valid url. The option value is converted to a url (cl-url) if it is a string, or left unmodified if already a url.

Example:

@example
(:host "Host" :url :documentation "The web application host")
@end example

@node Pathname
@subsection Pathname
@cindex pathaname

The pathaname option type is specified with @emph{:path}. It ensures that the the option value is a valid pathname and the file or directory exists. The option value is converted to a pathname if it is a string, or left unmodified if already a pathname.

Example:

@example
(:stylesheet "Stylesheet" :pathname :documentation "The stylesheet file")
@end example

@node One of
@subsection One of
@cindex one of

The @emph{one of} option type is specified with @emph{:one-of} followed by the list of options, all between parenthesis. It is ensured that the option value is one of the options listed. Options are specified as a list with the option-identifier as a keyword, and the option title with a string.

Example:

@example
(:connection-type "Connection type"
      (:one-of (:socket "Socket")
	       (:tcp "TCP")))
@end example

@node List
@subsection List
@cindex list

The @emph{list} option type is specified with @emph{:list} followed by the list of options, all between parenthesis. It is ensured that the option value is a subset of the options listed. Options are specified as a list with the option-identifier as a keyword, and the option title with a string.

Example:

@example
(:debugging-levels "Debugging levels" (:list (:info "Info")
					     (:warning "Warning")
					     (:profile "Profile")))
@end example

@node Configurations
@chapter Configurations

How to define configurations

@menu
* Working with configurations::         The API to work with configurations
* Configurations serialization::        Configurations serialization
@end menu

@node Working with configurations
@section Working with configurations

The API for working with configurations

@node Configurations serialization
@section Configurations serialization
@cindex serialization

There are two output backends: an sexp-backend and a xml-backend

@node Installer
@chapter Installer
@cindex installer

CL-Config provides machinery for building your application installers.

In CL-Config an application installer is an instance of the class @emph{installer}. Installers are funcallable, and the idea is to think of installers as a function returning other function, that is, they follow a Continuation Passing Style design.

Some installers features:

@itemize @bullet
@item
They are funcallable
@item
They are indenpendent of the UI. You can think of an installer as some kind of Controller in MVC. There's a web frontend available for installers; we plan to build some lighter-weight frontends, such as installing from the REPL or from an ncurses interface.
@item
They follow a continuation passing design.
@end itemize

There's a Domain Specific Language for defining installers and in particular, wizard installers. Wizard installers are those that asks for data in different sections or ``pages'' to complete the installation.

To define installers, there are three macros: @emph{define-installer}. @emph{define-wizard-installer} and @emph{define-standard-installer}.

An example of an installer session:

@example
CFG> *i*
#<WIZARD-INSTALLER MY-INSTALLER "My installer" {1006C2AB99}>
@end example

We use funcall to start interacting with the installer:

@example
CFG> (funcall *i*)
(:SECTION :WEBAPP-CONFIGURATION "Web configuration")
@end example

The web configuration section starts

@example
CFG> (funcall *i*)
(:INPUT (HTTP-SERVER HOST PORT))
@end example

We are asked to input the :http-server, the :host and the :port

@example
CFG> (funcall *i* :http-server :apache :host "localhost" :port 8080)
(:SECTION :DATABASE-CONFIGURATION "Database configuration")
@end example

Success. Now we enter the database configuration section.

@example
CFG> (funcall *i*)
(:INPUT (NAME HOST USERNAME PASSWORD CONNECTION-TYPE))
@end example

We are asked to enter database parameters:

@example
CFG> (funcall *i* :name "my-database" :host "localhost" :username "mariano" :password "pass" :connection-type :foo)
(:ERRORS
 (#<VALIDATION-ERROR
    FOO value should be one of (SOCKET TCP) on #<ONE-OF-CONFIGURATION-OPTION
                                                 #<CONFIGURATION-SCHEMA-OPTION
                                                   CONNECTION-TYPE "Connection type"
                                                   {1005BDF081}> FOO
                                                 {10085A57F1}>
    {10085A6701}>))
@end example

We entered the parameters, but the :connection-type is not valid. We have to try again.

@example
CFG> (funcall *i*)
(:INPUT (NAME HOST USERNAME PASSWORD CONNECTION-TYPE))
CFG> (funcall *i* :name "my-database" :host "localhost" :username "mariano" :password "pass" :connection-type :socket)
(:SECTION :LOGGING-CONFIGURATION "Logging configuration")
@end example

We succeed this time, and we enter the logging configuration section

@example
CFG> (funcall *i*)
(:INPUT (BACKEND DEBUGGING-LEVELS OUTPUT-LOCATION ACTIVE-LAYERS))
@end example

We are asked for logging section parameters

@example
CFG> (funcall *i* :backend :log5 :debugging-levels '(:info) :output-location :file :active-layers '(:debugging))
#<CONFIGURATION MY-CONFIG "My config" {1006D3DB91}>
@end example

We finish the installation and we get the configured configuration as result.

@node Examples
@chapter Examples
@cindex examples

@menu
* Use cases::                           Typical use cases
@end menu

@example

(define-configuration-schema database-configuration ()
   (:title "Database configuration")
   (:documentation "Database configuration")
   (:section :database-configuration "Database configuration"
      (:documentation "Section for configuring the database")
      (:connection-type "Connection type"
          (:one-of (:socket "Socket"
			    :configuration 'db-socket-configuration)
		   (:tcp "TCP"
			 :configuration 'db-tcp-configuration)))
      (:username "Username" :text :documentation "The database engine username")
      (:password "Password" :text :documentation "The database engine password")
      (:database-name "Database name" :text)
      (:database-parameters "Database parameters" :text :default "" :advanced t)))

(define-configuration-schema cl-config-application-configuration ()
  (:title "CL-CONFIG Application Configuration")
  (:documentation "CL-CONFIG Application Configuration")
  (:section :configuration-settings "Configuration settings"
	    (:load-configs-from-file "Load configurations from file"
				     :boolean :default t)
	    (:load-configs-file "Configurations file" :pathname :optional t)
	    (:select-config-from-file "Select configuration from file"
				      :boolean :default t)
	    (:select-config-file "Select configuration file" :pathname :optional t)))

(define-configuration-schema db-socket-configuration ()
    (:title "Socket configuration")
    (:section :db-socket-configuration "Socket configuration"
        (:path "Socket" :pathname
               :default "/tmp/socket.soc")))

(define-configuration-schema db-tcp-configuration ()
    (:title "TCP configuration")
    (:section "TCP configuration"
        (:url "URL" :url
              :default "localhost")))

(define-configuration-schema logging-configuration ()
    (:title "Logging configuration")
    (:documentation "Logging configuration")
    (:section :logging-configuration "Logging configuration"
        (:documentation "Logging configuration")
        (:backend "Backend"
            (:one-of (:log5 "Log5")))
	(:debugging-levels "Debugging levels" (:list (:info "Info")
						     (:warning "Warning")
						     (:profile "Profile")))
	(:output-location "Output location"
                    (:one-of (:standard-output "Standard output"
					       :default *standard-output*)
			     (:file "File" :default "/tmp/log.log"))
		    :default '*standard-output)
        (:active-layers "Active layers"
			(:list
			 (:debugging "Debugging"
				     :configuration 'debugging-layer)
			 (:database "Database"
				    :configuration database-layer)
			 (:control-flow "Control flow")
			 (:system "System")))))

(define-configuration-schema webapp-configuration (logging-configuration)
    (:title "Web application configuration")
    (:documentation "Web application configuration")
    (:section :webapp-configuration "Web application configuration"
        (:documentation "Web application configuration")
        (:http-server "HTTP server"
            (:one-of (:apache "Apache"
			      :configuration 'apache-configuration)
                    (:hunchentoot "Hunchentoot"
				  :configuration 'hunchentoot-configuration)))
        (:host "Host" :text :default "localhost")
	(:port "Port" :integer :default 8080)
	(:catch-errors "Catch errors" :boolean :default t)))                    

(define-configuration-schema standard-configuration
    (cl-config-application-configuration
     webapp-configuration
     database-configuration)
      (:title "Standard configuration")
      (:documentation "Standard configuration for a Gestalt application")
      (:page-title "Page title" :text :default "Gestalt application"))

(define-configuration standard-configuration ()
  (:title "Standard configuration")
  (:configuration-schema standard-configuration)
  (:section :database-configuration
	    (:connection-type :socket
			      :value2
			      '(:db-socket-configuration
				(:path "/tmp/my-socket.soc")))
	    (:username "root")
	    (:password "root")
	    (:database-name "standard-database"))
  (:section :webapp-configuration
	    (:http-server :hunchentoot))
  (:section :logging-configuration
	    (:active-layers (:debugging))
	    (:output-location :standard-output)
	    (:debugging-levels (:info))
	    (:backend :log5)))

(define-configuration debug-configuration (standard-configuration)
    (:configuration-schema standard-configuration)
    (:title "Debug configuration")
    (:section :database-configuration
        (:database-name "debug-database"))
    (:section :logging-configuration
       (:output-location :standard-output)
       (:active-layers (:debugging :database))
       (:debugging-levels (:info :warning :error)))
    (:section :webapp-configuration
	      (:catch-errors nil))
    (:documentation "Debugging configuration scheme"))

(define-configuration test-configuration (standard-configuration)
    (:configuration-schema standard-configuration)
    (:title "Test configuration")
    (:section :database-configuration
        (:database-name "test-database"))
    (:section :logging-configuration
       (:output-location :file :value2 "/tmp/test.log")
       (:active-layers (:debugging :database) :inherit t)
       (:debugging-levels (:warning :error)))
    (:documentation "Testing configuration scheme"))
@end example

An installer example:

@example
(defmacro configure-section (section configuration options)
  (let ((fname (gensym "CONFIGURE-SECTION-")))
  `(labels ((,fname ()
	    (with-input ,(mapcar (lambda (option)
			  (intern (symbol-name option)))
			options)
	      (collecting-validation-errors (errors found-p)
		  (progn
		    ,@@(loop for option in options
			 collect
			   `(setf (get-option-value (list ,section ,option)
						    ,configuration)
				  ,(intern (symbol-name option)))))
		(when found-p
		  (install-errors errors)
		  (,fname))))))
     (,fname))))

(define-wizard-installer my-installer
    (:title "My installer"
	    :documentation "This is my installer")
  (let ((configuration (cfg:with-schema-validation (nil)
			 (make-configuration my-config ()
					     (:title "My config")
					     (:configuration-schema standard-configuration)))))

    ;; Configure web section
    (start-section :webapp-configuration "Web configuration")
    (configure-section :webapp-configuration configuration
		       (:http-server :host :port))
    
    ;; Configure the database section
    (start-section :database-configuration "Database configuration")
    (configure-section :database-configuration configuration
		       (:name :host :username :password :connection-type))

    ;; Configure logging section
    (start-section :logging-configuration "Logging configuration")
    (configure-section :logging-configuration configuration
		       (:backend :debugging-levels :output-location :active-layers))
    (validate-configuration configuration)
    configuration))
@end example

@node Use cases
@section Use cases

@menu
* Debugging::          Example of application debugging configuration
* Logging::            Example of application logging configuration
* Testing::            Example of application testing configuration
* Deployment::         Example of application deployment configuration
@end menu

@node Debugging
@subsection Debugging
@cindex debugging

@node Logging
@subsection Logging
@cindex logging

@node Testing
@subsection Testing
@cindex testing

@node Deployment
@subsection Deployment
@cindex deployment

@node Configuration editing
@chapter Configuration editing

Configurations can be edited from a web interface.

To start the web configuration editor, evaluate:

@example

(require :cl-config-web)
(cfg.web:start-cl-config-web)

@end example

and then point your browser to http://localhost:4242

@image{web-editor}

@node Custom option types
@chapter Custom option types

How to define custom option types

@node System reference
@chapter System reference

@include references.texinfo

@node References
@chapter References
@cindex reference

 [Common Lisp Directory]
 [Common Lisp Wiki]

 [Common Lisp Directory]: http://common-lisp.net
 [Common Lisp Wiki]: http://www.cliki.net

@node Index
@chapter Index
@menu
* Concept Index::          The concept index
* Class Index::            The classes index
* Function / Macro Index:: The functions and macros index
* Variable Index::         The variables index
@end menu

@node Concept Index
@section Concept Index

@printindex cp

@node Class Index
@section Class Index

@printindex tp

@node Function / Macro Index
@section Function / Macro Index
     
@printindex fn

@node Variable Index
@section Variable Index
     
@printindex vr

@bye
