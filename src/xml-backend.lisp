(in-package :cl-config)

;; Reading and writing configuration from and to xml streams

(defclass xml-writer (output-backend)
  ())

(defclass xml-reader (output-backend)
  ())

(defmethod run ((writer xml-writer)
		(configuration-schema configuration-schema)
		stream)
  (xml-emitter:with-xml-output (stream)
    (xml-emitter:with-tag ("configuration-schema")
      (xml-emitter:with-simple-tag ("name")
	(xml-emitter:xml-out (name configuration-schema)))
      (xml-emitter:with-simple-tag ("title")
	(xml-emitter:xml-out (title configuration-schema)))
      (xml-emitter:with-simple-tag ("documentation")
	(xml-emitter:xml-out (documentation* configuration-schema)))
      (xml-emitter:with-tag ("parents")
	(loop for parent in (slot-value configuration-schema 'parents)
	   do (xml-emitter:with-simple-tag ("parent")
		(xml-emitter:xml-out (prin1-to-string parent)))))
      (xml-emitter:with-tag ("direct-sections")
	(loop for section being the hash-values of (direct-sections configuration-schema)
	     do (serialize-section writer section stream))))))

(defmethod serialize-section ((writer xml-writer)
			      (section configuration-schema-section)
			      stream)
  (xml-emitter:with-tag ("section")
    (xml-emitter:with-simple-tag ("name")
      (xml-emitter:xml-out (name section)))
    (xml-emitter:with-simple-tag ("title")
      (xml-emitter:xml-out (title section)))
    (xml-emitter:with-simple-tag ("documentation")
      (xml-emitter:xml-out (documentation* section)))
    (xml-emitter:with-tag ("options")
	(loop for option being the hash-values of (direct-options section)
	     do (serialize-option writer option stream)))))

(defmethod serialize-option ((writer xml-writer)
			     (option configuration-schema-option)
			     stream)
  (xml-emitter:with-tag ("option")
    (xml-emitter:with-simple-tag ("name")
      (xml-emitter:xml-out (name option)))
    (xml-emitter:with-simple-tag ("title")
      (xml-emitter:xml-out (title option)))
    (xml-emitter:with-simple-tag ("type")
      (serialize-type writer (option-type option) stream))
    (xml-emitter:with-simple-tag ("optional")
      (xml-emitter:xml-out (if (optional option)
			       "TRUE"
			       "FALSE")))
    (xml-emitter:with-simple-tag ("default")
      (xml-emitter:xml-out (default option)))
    (xml-emitter:with-simple-tag ("advanced")
      (xml-emitter:xml-out (if (advanced option)
			       "TRUE"
			       "FALSE")))
    (xml-emitter:with-simple-tag ("validate")
      (xml-emitter:xml-out (prin1-to-string
			    (validate option))))
    (xml-emitter:with-simple-tag ("error-msg")
      (xml-emitter:xml-out (error-msg option)))
    (xml-emitter:with-simple-tag ("documentation")
      (xml-emitter:xml-out (documentation* option)))))

(defmethod serialize-type (writer (type configuration-schema-option-type) stream)
  (error "No serializer defined for ~A using ~A" type writer))

(defmethod serialize-type ((writer xml-writer)
			   (type text-configuration-schema-option-type)
			   stream)
  (xml-emitter:xml-out "text"))

(defmethod serialize-type ((writer xml-writer)
			   (type list-configuration-schema-option-type)
			   stream)
  (xml-emitter:with-tag ("list")
    (loop for option in (options type)
       do (xml-emitter:with-simple-tag ("item")
	    (xml-emitter:xml-out (prin1-to-string option))))))

(defmethod serialize-type ((writer xml-writer)
			   (type email-configuration-schema-option-type)
			   stream)
  (xml-emitter:xml-out "email"))

(defmethod serialize-type ((writer xml-writer)
			   (type url-configuration-schema-option-type)
			   stream)
  (xml-emitter:xml-out "url"))

(defmethod serialize-type ((writer xml-writer)
			   (type pathname-configuration-schema-option-type)
			   stream)
  (xml-emitter:xml-out "pathname"))

(defmethod serialize-type ((writer xml-writer)
			   (type one-of-configuration-schema-option-type)
			   stream)
  (xml-emitter:with-tag ("one-of")
    (loop for option in (options type)
       do (with-slots (name title) option
	    (xml-emitter:with-tag ("option")
	      (xml-emitter:with-simple-tag ("name")
		(xml-emitter:xml-out name))
	      (xml-emitter:with-simple-tag ("title")
		(xml-emitter:xml-out title)))))))
	      