(in-package :cl-config)

;; Reading and writing configuration from and to xml streams

(defclass xml-writer (output-backend)
  ())

(defclass xml-reader (output-backend)
  ())

(defmethod run ((writer xml-writer)
		(configuration-schema configuration-schema)
		stream)
  (xml-emitter:with-xml-output (stream)
    (xml-emitter:with-tag ("configuration-schema")
      (xml-emitter:with-simple-tag ("name")
	(xml-emitter:xml-out (name configuration-schema)))
      (xml-emitter:with-simple-tag ("title")
	(xml-emitter:xml-out (title configuration-schema)))
      (xml-emitter:with-simple-tag ("documentation")
	(xml-emitter:xml-out (documentation* configuration-schema)))
      (xml-emitter:with-tag ("parents")
	(loop for parent in (slot-value configuration-schema 'parents)
	   do (xml-emitter:with-simple-tag ("parent")
		(xml-emitter:xml-out (prin1-to-string parent)))))
      (xml-emitter:with-tag ("direct-sections")
	(loop for section being the hash-values of (direct-sections configuration-schema)
	     do (serialize-section writer section stream))))))

(defmethod serialize-section ((writer xml-writer)
			      (section configuration-schema-section)
			      stream)
  (xml-emitter:with-tag ("section")
    (xml-emitter:with-simple-tag ("name")
      (xml-emitter:xml-out (name section)))
    (xml-emitter:with-simple-tag ("title")
      (xml-emitter:xml-out (title section)))
    (xml-emitter:with-simple-tag ("documentation")
      (xml-emitter:xml-out (documentation* section)))))